// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  verificationToken       String?
  verificationTokenExpires DateTime?
  resetToken              String?
  resetTokenExpires       DateTime?
  role                    Role      @default(USER)
  accounts                Account[]
  sessions                Session[]
  participations          HackathonParticipant[]
  participationRequests   ParticipationRequest[]
  totalScore             Float     @default(0) // Общий рейтинг пользователя
  tasksCompleted         Int       @default(0) // Общее количество решенных задач
  hackathonsParticipated Int       @default(0) // Количество хакатонов, в которых участвовал
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  identifier String  @unique
  expires   DateTime

  @@unique([email, token])
}

enum Role {
  USER
  ADMIN
}

model Task {
  id            String     @id @default(uuid())
  title         String
  difficulty    String
  description   String
  functionName  String
  inputParams   Json
  outputParams  Json
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  testCases     TestCase[]
  codeTemplates CodeTemplate[]
  submissions   TaskSubmission[]
}

model TestCase {
  id             String   @id @default(uuid())
  input          String
  expectedOutput String
  taskId         String
  task           Task     @relation(fields: [taskId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([taskId])
}

model CodeTemplate {
  id           String   @id @default(uuid())
  language     String   // 'cpp', 'js', 'rust', 'java'
  baseTemplate String   @db.Text
  fullTemplate String   @db.Text
  taskId       String
  task         Task     @relation(fields: [taskId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([taskId])
  @@unique([taskId, language])
}

model Hackathon {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  startDate   DateTime
  endDate     DateTime
  isOpen      Boolean  @default(true)
  tasks       Json     // Массив ID задач
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  participants HackathonParticipant[]
  applications ParticipationRequest[]
  submissions  TaskSubmission[]
}

// Участники хакатона
model HackathonParticipant {
  id          String    @id @default(uuid())
  userId      String
  hackathonId String
  joinedAt    DateTime  @default(now())
  totalScore  Float     @default(0)
  user        User      @relation(fields: [userId], references: [id])
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  submissions TaskSubmission[]

  @@unique([userId, hackathonId])
  @@index([hackathonId])
  @@index([userId])
}

// Заявки на участие в закрытом хакатоне
model ParticipationRequest {
  id          String    @id @default(uuid())
  userId      String
  hackathonId String
  status      RequestStatus @default(PENDING)
  message     String?   @db.Text // Сообщение от пользователя
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])

  @@unique([userId, hackathonId])
  @@index([hackathonId])
  @@index([userId])
}

// Статус заявки на участие
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Status {
  PENDING
  PROCESSING
  ACCEPTED
  REJECTED
  ERROR
}

// Решения задач участниками
model TaskSubmission {
  id             String   @id @default(cuid())
  status         Status   @default(PENDING)
  testsPassed    Int     @default(0)
  testsTotal     Int     @default(0)
  memory         BigInt? 
  executionTime  BigInt?
  language       String?
  code           String  @db.Text
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  
  participant   HackathonParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String
  task         Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String
  hackathon    Hackathon? @relation(fields: [hackathonId], references: [id], onDelete: SetNull)
  hackathonId  String?

  @@index([participantId])
  @@index([taskId])
  @@index([hackathonId])
}
